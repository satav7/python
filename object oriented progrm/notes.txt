In the code methods.py

- Fighter is the 'class variable'
- 'self ' is the object variable
- def attack ---> here attack is called as the 'method'(Only when it is in class)--->
  So basically 'attack method'
- __init__ ---> this is called 'Dunder method'(with underscores)
- Rishab(outside class) is known as the object.
- __str__ ---> is very important method. We are using it to overide the print funtion--> print(Rishab)
  Without the above function we would not be able to print 
- Instance Variables are variables that belong to class itself.
- DECORATOR --> In the 'obj_var_project' we use how_many . @classmethod --> 
  this maes sure that the variable comes
  under class variable.
- If you use data members with names using the double underscore prefix such as __privatevar, 
   Python uses name-mangling to effectively make it a private variable.

  Thus, the convention followed is that any variable that is to be used only within the class or
  object should begin with an underscore and all other names are public and can be used by other
  classes/objects. Remember that this is only a convention and is not enforced by Python 
  (except for the double underscore prefix).

# Pyhton basics (for nowing terminologies):

age = 20
name = 'Swaroop'

print('{} was {} years old when he wrote this book'.format(name, age))

########

print('a', end='')
print('b', end='')
Output is:

ab

#########

// (divide and floor)

Divide x by y and round the answer down to the nearest integer value. 
Note that if one of the values is a float, you'll get back a float.
13 // 3 gives 4
-13 // 3 gives -5
9//1.81 gives 4.0

% (modulo)

Returns the remainder of the division
13 % 3 gives 1. -25.5 % 2.25 gives 1.5.


<< (left shift)

Shifts the bits of the number to the left by the number of bits specified. 
(Each number is represented in memory by bits or binary digits i.e. 0 and 1)
2 << 2 gives 8. 2 is represented by 10 in bits.
Left shifting by 2 bits gives 1000 which represents the decimal 8.
>> (right shift)

Shifts the bits of the number to the right by the number of bits specified.
11 >> 1 gives 5.
11 is represented in bits by 1011 which when right shifted by 1 bit gives 101which is the decimal 5.
& (bit-wise AND)

Bit-wise AND of the numbers
5 & 3 gives 1.
| (bit-wise OR)

Bitwise OR of the numbers
5 | 3 gives 7
^ (bit-wise XOR)

Bitwise XOR of the numbers
5 ^ 3 gives 6
~ (bit-wise invert)

The bit-wise inversion of x is -(x+1)
~5 gives -6. More details at http://stackoverflow.com/a/11810203
< (less than)

Returns whether x is less than y. All comparison operators return True or False.
 Note the capitalization of these names.
5 < 3 gives False and 3 < 5 gives True.
Comparisons can be chained arbitrarily: 3 < 5 < 7 gives True.
> (greater than)

Returns whether x is greater than y
5 > 3 returns True. If both operands are numbers, they are first converted to a common type. 
Otherwise, it always returns False.
<= (less than or equal to)

Returns whether x is less than or equal to y
x = 3; y = 6; x <= y returns True
>= (greater than or equal to)

Returns whether x is greater than or equal to y
x = 4; y = 3; x >= 3 returns True
== (equal to)

Compares if the objects are equal
x = 2; y = 2; x == y returns True
x = 'str'; y = 'stR'; x == y returns False
x = 'str'; y = 'str'; x == y returns True
!= (not equal to)

Compares if the objects are not equal
x = 2; y = 3; x != y returns True
not (boolean NOT)

If x is True, it returns False. If x is False, it returns True.
x = True; not x returns False.
and (boolean AND)

x and y returns False if x is False, else it returns evaluation of y
x = False; y = True; x and y returns False since x is False. In this case, 
Python will not evaluate y since it knows that the left hand side of the 'and' expression is False 
which implies that the whole expression will be False irrespective of the other values. 
This is called short-circuit evaluation.
or (boolean OR)

If x is True, it returns True, else it returns evaluation of y
x = True; y = False; x or y returns True. Short-circuit evaluation applies here as well.




#########################

lambda : Lambda Expression
if - else : Conditional expression
or : Boolean OR
and : Boolean AND
not x : Boolean NOT
in, not in, is, is not, <, <=, >, >=, !=, == : Comparisons, including membership tests and identity tests
| : Bitwise OR
^ : Bitwise XOR
& : Bitwise AND
<<, >> : Shifts
+, - : Addition and subtraction
*, /, //, % : Multiplication, Division, Floor Division and Remainder
+x, -x, ~x : Positive, Negative, bitwise NOT
** : Exponentiation
x[index], x[index:index], x(arguments...), x.attribute : Subscription,
 slicing, call, attribute reference
(expressions...), [expressions...], {key: value...}, {expressions...} :
 Binding or tuple display, list display, dictionary display, set display